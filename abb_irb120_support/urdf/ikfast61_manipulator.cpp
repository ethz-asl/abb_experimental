/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000048 generated on 2015-12-02 13:05:32.306990
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000048);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)2e-6)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.000005)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51;
x0=IKcos(j[4]);
x1=IKcos(j[0]);
x2=IKcos(j[1]);
x3=IKcos(j[2]);
x4=(x2*x3);
x5=(x1*x4);
x6=IKsin(j[1]);
x7=IKsin(j[2]);
x8=(x6*x7);
x9=((1.0)*x8);
x10=(x1*x9);
x11=IKsin(j[4]);
x12=IKsin(j[0]);
x13=IKsin(j[3]);
x14=(x12*x13);
x15=IKcos(j[3]);
x16=(x3*x6);
x17=((1.0)*x16);
x18=(x1*x17);
x19=(x2*x7);
x20=((1.0)*x19);
x21=(x1*x20);
x22=(x15*(((((-1.0)*(1.0)*x21))+(((-1.0)*(1.0)*x18)))));
x23=((((-1.0)*(1.0)*x14))+x22);
x24=IKcos(j[5]);
x25=((1.0)*x12);
x26=(x15*x25);
x27=(x13*((x18+x21)));
x28=IKsin(j[5]);
x29=((1.0)*x11);
x30=((1.0)*x4);
x31=((1.0)*x0);
x32=(((x29*((((x1*x30))+(((-1.0)*(1.0)*x10))))))+(((-1.0)*(1.0)*x23*x31)));
x33=((0.27)*x6);
x34=((0.302)*x6*x7);
x35=((0.07)*x1);
x36=((0.072)*x8);
x37=((0.072)*x4);
x38=(x12*x4);
x39=(x25*x8);
x40=(x1*x13);
x41=(x16*x25);
x42=(x19*x25);
x43=(x15*(((((-1.0)*(1.0)*x42))+(((-1.0)*(1.0)*x41)))));
x44=(x40+x43);
x45=(x1*x15);
x46=(x13*((x41+x42)));
x47=((((-1.0)*(1.0)*x31*x44))+((x29*(((((-1.0)*(1.0)*x39))+((x25*x4)))))));
x48=((0.07)*x12);
x49=(x11*x15);
x50=((((-1.0)*(1.0)*x30))+x8);
x51=(((x29*(((((-1.0)*(1.0)*x17))+(((-1.0)*(1.0)*x20))))))+(((-1.0)*(1.0)*x15*x31*x50)));
eerot[0]=(((x11*x23))+((x0*(((((-1.0)*(1.0)*x10))+x5)))));
eerot[1]=(((x24*((x27+(((-1.0)*(1.0)*x26))))))+((x28*x32)));
eerot[2]=(((x24*x32))+((x28*((x26+(((-1.0)*(1.0)*x27)))))));
IkReal x52=((1.0)*x1);
eetrans[0]=(((x19*x35))+((x16*x35))+(((0.302)*x5))+((x1*x33))+((x0*(((((-1.0)*x36*x52))+((x1*x37))))))+((x11*(((((0.072)*x22))+(((-1.0)*(0.072)*x14))))))+(((-1.0)*x34*x52)));
eerot[3]=(((x11*x44))+((x0*((x38+(((-1.0)*(1.0)*x39)))))));
eerot[4]=(((x28*x47))+((x24*((x45+x46)))));
eerot[5]=(((x28*(((((-1.0)*(1.0)*x45))+(((-1.0)*(1.0)*x46))))))+((x24*x47)));
IkReal x53=((1.0)*x12);
eetrans[1]=(((x16*x48))+(((0.302)*x38))+((x11*(((((0.072)*x40))+(((0.072)*x43))))))+(((-1.0)*x34*x53))+((x0*((((x12*x37))+(((-1.0)*x36*x53))))))+((x12*x33))+((x19*x48)));
eerot[6]=(((x0*(((((-1.0)*(1.0)*x17))+(((-1.0)*(1.0)*x20))))))+((x49*x50)));
eerot[7]=(((x28*x51))+((x13*x24*((x30+(((-1.0)*(1.0)*x9)))))));
eerot[8]=(((x24*x51))+((x13*x28*x50)));
eetrans[2]=((0.29)+(((0.27)*x2))+((x49*((x36+(((-1.0)*(1.0)*x37))))))+(((0.07)*x4))+((x0*(((((-1.0)*(0.072)*x19))+(((-1.0)*(0.072)*x16))))))+(((-1.0)*(0.302)*x16))+(((-1.0)*(0.302)*x19))+(((-1.0)*(0.07)*x8)));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=((-1.0)*(((1.0)*r02)));
new_r01=r01;
new_r02=r00;
new_px=((((-1.0)*(0.072)*r00))+px);
new_r10=((-1.0)*(((1.0)*r12)));
new_r11=r11;
new_r12=r10;
new_py=(py+(((-1.0)*(0.072)*r10)));
new_r20=((-1.0)*(((1.0)*r22)));
new_r21=r21;
new_r22=r20;
new_pz=((-0.29)+pz+(((-1.0)*(0.072)*r20)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x54=((1.0)*py);
IkReal x55=((1.0)*pz);
IkReal x56=((1.0)*px);
pp=((pz*pz)+(py*py)+(px*px));
npx=(((pz*r20))+((py*r10))+((px*r00)));
npy=(((pz*r21))+((py*r11))+((px*r01)));
npz=(((px*r02))+((pz*r22))+((py*r12)));
rxp0_0=((((-1.0)*r20*x54))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x55)));
rxp0_2=((((-1.0)*r10*x56))+((py*r00)));
rxp1_0=((((-1.0)*r21*x54))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x55)));
rxp1_2=((((-1.0)*r11*x56))+((py*r01)));
rxp2_0=((((-1.0)*r22*x54))+((pz*r12)));
rxp2_1=((((-1.0)*r02*x55))+((px*r22)));
rxp2_2=((((-1.0)*r12*x56))+((py*r02)));
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
if( (((-1.00956082949184)+(((5.97359133210955)*pp)))) < -1-IKFAST_SINCOS_THRESH || (((-1.00956082949184)+(((5.97359133210955)*pp)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x57=IKasin(((-1.00956082949184)+(((5.97359133210955)*pp))));
j2array[0]=((-2.91382668784903)+(((1.0)*x57)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=((0.22776596574076)+(((-1.0)*x57)));
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
if( j2array[1] > IKPI )
{
    j2array[1]-=IK2PI;
}
else if( j2array[1] < -IKPI )
{    j2array[1]+=IK2PI;
}
j2valid[1] = true;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

{
IkReal j0eval[1];
j0eval[0]=((IKabs(py))+(IKabs(px)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
j1eval[0]=((1.92857142857143)+(((2.54243386243386)*(cj2*cj2)))+(((-1.0)*(4.31428571428571)*sj2))+(((2.54243386243386)*(sj2*sj2)))+cj2);
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j0, j1]

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x58=((-0.27)+(((-1.0)*(0.07)*cj2))+(((0.302)*sj2)));
IkReal x59=((((0.302)*cj2))+(((0.07)*sj2)));
CheckValue<IkReal> x62 = IKatan2WithCheck(IkReal(x58),x59,IKFAST_ATAN2_MAGTHRESH);
if(!x62.valid){
continue;
}
IkReal x60=((-1.0)*(x62.value));
if((((x59*x59)+(x58*x58))) < -0.00001)
continue;
CheckValue<IkReal> x63=IKPowWithIntegerCheck(IKabs(IKsqrt(((x59*x59)+(x58*x58)))),-1);
if(!x63.valid){
continue;
}
if( ((pz*(x63.value))) < -1-IKFAST_SINCOS_THRESH || ((pz*(x63.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x61=IKasin((pz*(x63.value)));
j1array[0]=(x60+(((-1.0)*x61)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+x61+x60);
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

{
IkReal j0eval[3];
IkReal x64=(((cj1*pp))+(((-1.0)*(1.0)*cj1*(pz*pz))));
IkReal x65=((151.0)*cj2);
IkReal x66=((35.0)*sj2);
IkReal x67=((500.0)*pz*sj1);
j0eval[0]=x64;
j0eval[1]=IKsign(x64);
j0eval[2]=((IKabs((((py*x66))+((py*x67))+((py*x65)))))+(IKabs((((px*x66))+((px*x67))+((px*x65))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
IkReal x68=(pp*sj1);
IkReal x69=(sj1*(pz*pz));
IkReal x70=((250000.0)*pp);
IkReal x71=((135000.0)*cj1*pz);
j0eval[0]=(x68+(((-1.0)*x69)));
j0eval[1]=IKsign(((((-27.0)*x69))+(((27.0)*x68))));
j0eval[2]=((IKabs(((((-1.0)*py*x71))+(((-1.0)*(5801.0)*py))+((py*x70)))))+(IKabs(((((-1.0)*(5801.0)*px))+(((-1.0)*px*x71))+((px*x70))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
IkReal x72=((((-1.0)*(1.0)*sj1*(pz*pz)))+((pp*sj1)));
IkReal x73=((35.0)*cj2);
IkReal x74=((151.0)*sj2);
IkReal x75=((500.0)*cj1*pz);
j0eval[0]=x72;
j0eval[1]=((IKabs(((((-1.0)*py*x75))+(((-1.0)*py*x74))+(((135.0)*py))+((py*x73)))))+(IKabs((((px*x73))+(((-1.0)*px*x74))+(((135.0)*px))+(((-1.0)*px*x75))))));
j0eval[2]=IKsign(x72);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x76=((-1.0)*(((1.0)*pp)));
IkReal x77=((-0.27)+(((-1.0)*(0.07)*cj2))+pz+(((0.302)*sj2)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));
evalcond[1]=((0.169004)+(((0.0378)*cj2))+(((-1.0)*(0.16308)*sj2))+x76);
evalcond[2]=((0.023204)+(((0.54)*pz))+x76);
evalcond[3]=x77;
evalcond[4]=x77;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj1=0;
cj1=1.0;
j1=0;
IkReal x78=(pp+(((-1.0)*(1.0)*(pz*pz))));
IkReal x79=((37750000.0)*pp);
IkReal x80=((6487020.0)*sj2);
j0eval[0]=x78;
j0eval[1]=((IKabs((((py*x79))+((py*x80))+(((-1.0)*(6379901.0)*py)))))+(IKabs((((px*x80))+(((-1.0)*(6379901.0)*px))+((px*x79))))));
j0eval[2]=IKsign(x78);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j0]

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x81=((7.98941798941799)*pp);
IkReal x82=((1.37291428571429)*sj2);
CheckValue<IkReal> x83 = IKatan2WithCheck(IkReal(((((-1.0)*(1.3502435978836)*py))+((py*x82))+((py*x81)))),((((-1.0)*(1.3502435978836)*px))+((px*x82))+((px*x81))),IKFAST_ATAN2_MAGTHRESH);
if(!x83.valid){
continue;
}
CheckValue<IkReal> x84=IKPowWithIntegerCheck(IKsign((pp+(((-1.0)*(1.0)*(pz*pz))))),-1);
if(!x84.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x83.value)+(((1.5707963267949)*(x84.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x85=IKsin(j0);
IkReal x86=((1.0)*(IKcos(j0)));
evalcond[0]=((((-1.0)*py*x86))+((px*x85)));
evalcond[1]=((-1.3502435978836)+(((-1.0)*py*x85))+(((1.37291428571429)*sj2))+(((-1.0)*px*x86))+(((7.98941798941799)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x480=((-1.0)*(((1.0)*pp)));
IkReal x481=((0.07)*cj2);
IkReal x482=((0.302)*sj2);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));
evalcond[1]=((0.169004)+(((0.0378)*cj2))+(((-1.0)*(0.16308)*sj2))+x480);
evalcond[2]=((0.023204)+(((-1.0)*(0.54)*pz))+x480);
evalcond[3]=((-0.27)+(((-1.0)*(1.0)*pz))+(((-1.0)*x481))+x482);
evalcond[4]=((0.27)+pz+(((-1.0)*x482))+x481);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
IkReal x483=(pp+(((-1.0)*(1.0)*(pz*pz))));
IkReal x484=((37750000.0)*pp);
IkReal x485=((6487020.0)*sj2);
j0eval[0]=x483;
j0eval[1]=((IKabs(((((6379901.0)*py))+(((-1.0)*py*x485))+(((-1.0)*py*x484)))))+(IKabs(((((6379901.0)*px))+(((-1.0)*px*x484))+(((-1.0)*px*x485))))));
j0eval[2]=IKsign(x483);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j0]

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x486=((7.98941798941799)*pp);
IkReal x487=((1.37291428571429)*sj2);
CheckValue<IkReal> x488=IKPowWithIntegerCheck(IKsign((pp+(((-1.0)*(1.0)*(pz*pz))))),-1);
if(!x488.valid){
continue;
}
CheckValue<IkReal> x489 = IKatan2WithCheck(IkReal(((((-1.0)*py*x486))+(((-1.0)*py*x487))+(((1.3502435978836)*py)))),((((-1.0)*px*x486))+(((-1.0)*px*x487))+(((1.3502435978836)*px))),IKFAST_ATAN2_MAGTHRESH);
if(!x489.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x488.value)))+(x489.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x490=IKsin(j0);
IkReal x491=IKcos(j0);
evalcond[0]=((((-1.0)*py*x491))+((px*x490)));
evalcond[1]=((-1.3502435978836)+((px*x491))+(((1.37291428571429)*sj2))+(((7.98941798941799)*pp))+((py*x490)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x492=(pz+(((0.302)*cj2))+(((0.07)*sj2)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=((0.169004)+(((0.0378)*cj2))+(((-1.0)*(0.16308)*sj2))+(((-1.0)*(1.0)*pp)));
evalcond[2]=x492;
evalcond[3]=x492;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x493=pz*pz;
IkReal x494=((250000.0)*pp);
j0eval[0]=(pp+(((-1.0)*x493)));
j0eval[1]=IKsign(((((27.0)*pp))+(((-27.0)*x493))));
j0eval[2]=((IKabs((((px*x494))+(((-1.0)*(5801.0)*px)))))+(IKabs(((((-1.0)*(5801.0)*py))+((py*x494))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x495=(pp+(((-1.0)*(1.0)*(pz*pz))));
IkReal x496=((35.0)*cj2);
IkReal x497=((151.0)*sj2);
j0eval[0]=x495;
j0eval[1]=((IKabs(((((-1.0)*py*x497))+((py*x496))+(((135.0)*py)))))+(IKabs(((((135.0)*px))+(((-1.0)*px*x497))+((px*x496))))));
j0eval[2]=IKsign(x495);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j0]

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x498=((0.07)*cj2);
IkReal x499=((0.302)*sj2);
CheckValue<IkReal> x500=IKPowWithIntegerCheck(IKsign((pp+(((-1.0)*(1.0)*(pz*pz))))),-1);
if(!x500.valid){
continue;
}
CheckValue<IkReal> x501 = IKatan2WithCheck(IkReal((((py*x498))+(((-1.0)*py*x499))+(((0.27)*py)))),((((-1.0)*px*x499))+(((0.27)*px))+((px*x498))),IKFAST_ATAN2_MAGTHRESH);
if(!x501.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x500.value)))+(x501.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x502=IKsin(j0);
IkReal x503=IKcos(j0);
IkReal x504=(px*x503);
IkReal x505=(py*x502);
evalcond[0]=(((px*x502))+(((-1.0)*py*x503)));
evalcond[1]=((0.023204)+(((0.54)*x504))+(((-1.0)*(1.0)*pp))+(((0.54)*x505)));
evalcond[2]=((-0.27)+(((-1.0)*(0.07)*cj2))+x504+x505+(((0.302)*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x506=((50.0)*pp);
CheckValue<IkReal> x507=IKPowWithIntegerCheck(IKsign(((((27.0)*pp))+(((-1.0)*(27.0)*(pz*pz))))),-1);
if(!x507.valid){
continue;
}
CheckValue<IkReal> x508 = IKatan2WithCheck(IkReal(((((-1.0)*(1.1602)*py))+((py*x506)))),((((-1.0)*(1.1602)*px))+((px*x506))),IKFAST_ATAN2_MAGTHRESH);
if(!x508.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x507.value)))+(x508.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x509=IKsin(j0);
IkReal x510=IKcos(j0);
IkReal x511=(px*x510);
IkReal x512=(py*x509);
evalcond[0]=((((-1.0)*py*x510))+((px*x509)));
evalcond[1]=((0.023204)+(((0.54)*x511))+(((0.54)*x512))+(((-1.0)*(1.0)*pp)));
evalcond[2]=((-0.27)+(((-1.0)*(0.07)*cj2))+x512+x511+(((0.302)*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x513=((0.302)*cj2);
IkReal x514=((0.07)*sj2);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=((0.169004)+(((0.0378)*cj2))+(((-1.0)*(0.16308)*sj2))+(((-1.0)*(1.0)*pp)));
evalcond[2]=((((-1.0)*(1.0)*pz))+x514+x513);
evalcond[3]=((((-1.0)*x513))+(((-1.0)*x514))+pz);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x515=pz*pz;
IkReal x516=((250000.0)*pp);
j0eval[0]=(pp+(((-1.0)*x515)));
j0eval[1]=IKsign(((((27.0)*pp))+(((-27.0)*x515))));
j0eval[2]=((IKabs(((((5801.0)*px))+(((-1.0)*px*x516)))))+(IKabs(((((-1.0)*py*x516))+(((5801.0)*py))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x517=(pp+(((-1.0)*(1.0)*(pz*pz))));
IkReal x518=((35.0)*cj2);
IkReal x519=((151.0)*sj2);
j0eval[0]=x517;
j0eval[1]=((IKabs((((py*x519))+(((-1.0)*(135.0)*py))+(((-1.0)*py*x518)))))+(IKabs((((px*x519))+(((-1.0)*(135.0)*px))+(((-1.0)*px*x518))))));
j0eval[2]=IKsign(x517);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j0]

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x520=((0.07)*cj2);
IkReal x521=((0.302)*sj2);
CheckValue<IkReal> x522 = IKatan2WithCheck(IkReal(((((-1.0)*py*x520))+((py*x521))+(((-1.0)*(0.27)*py)))),(((px*x521))+(((-1.0)*px*x520))+(((-1.0)*(0.27)*px))),IKFAST_ATAN2_MAGTHRESH);
if(!x522.valid){
continue;
}
CheckValue<IkReal> x523=IKPowWithIntegerCheck(IKsign((pp+(((-1.0)*(1.0)*(pz*pz))))),-1);
if(!x523.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x522.value)+(((1.5707963267949)*(x523.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x524=IKsin(j0);
IkReal x525=IKcos(j0);
IkReal x526=(px*x525);
IkReal x527=(py*x524);
evalcond[0]=((((-1.0)*py*x525))+((px*x524)));
evalcond[1]=((0.023204)+(((-0.54)*x526))+(((-0.54)*x527))+(((-1.0)*(1.0)*pp)));
evalcond[2]=((-0.27)+(((-1.0)*(0.07)*cj2))+(((-1.0)*x526))+(((-1.0)*x527))+(((0.302)*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x528=((50.0)*pp);
CheckValue<IkReal> x529 = IKatan2WithCheck(IkReal(((((-1.0)*py*x528))+(((1.1602)*py)))),((((1.1602)*px))+(((-1.0)*px*x528))),IKFAST_ATAN2_MAGTHRESH);
if(!x529.valid){
continue;
}
CheckValue<IkReal> x530=IKPowWithIntegerCheck(IKsign(((((27.0)*pp))+(((-1.0)*(27.0)*(pz*pz))))),-1);
if(!x530.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x529.value)+(((1.5707963267949)*(x530.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x531=IKsin(j0);
IkReal x532=IKcos(j0);
IkReal x533=(px*x532);
IkReal x534=(py*x531);
evalcond[0]=(((px*x531))+(((-1.0)*py*x532)));
evalcond[1]=((0.023204)+(((-0.54)*x533))+(((-0.54)*x534))+(((-1.0)*(1.0)*pp)));
evalcond[2]=((-0.27)+(((-1.0)*(0.07)*cj2))+(((0.302)*sj2))+(((-1.0)*x533))+(((-1.0)*x534)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x535=((0.07)*cj2);
IkReal x536=((0.302)*sj2);
IkReal x537=((1.0)*cj1*pz);
CheckValue<IkReal> x538 = IKatan2WithCheck(IkReal(((((-1.0)*py*x536))+((py*x535))+(((0.27)*py))+(((-1.0)*py*x537)))),((((-1.0)*px*x536))+((px*x535))+(((0.27)*px))+(((-1.0)*px*x537))),IKFAST_ATAN2_MAGTHRESH);
if(!x538.valid){
continue;
}
CheckValue<IkReal> x539=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*sj1*(pz*pz)))+((pp*sj1)))),-1);
if(!x539.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x538.value)+(((1.5707963267949)*(x539.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x540=IKsin(j0);
IkReal x541=IKcos(j0);
IkReal x542=((1.0)*x541);
IkReal x543=(cj1*pz);
IkReal x544=(px*sj1*x541);
IkReal x545=(py*x540);
IkReal x546=(sj1*x545);
IkReal x547=((0.07)*cj2);
IkReal x548=((0.302)*sj2);
IkReal x549=((0.302)*cj2);
IkReal x550=((0.07)*sj2);
IkReal x551=(px*x542);
IkReal x552=((1.0)*x545);
evalcond[0]=(((px*x540))+(((-1.0)*py*x542)));
evalcond[1]=((0.023204)+(((0.54)*x543))+(((0.54)*x546))+(((0.54)*x544))+(((-1.0)*(1.0)*pp)));
evalcond[2]=((-0.27)+(((-1.0)*x547))+x544+x548+x546+x543);
evalcond[3]=(((pz*sj1))+(((-1.0)*cj1*x552))+(((-1.0)*cj1*x551))+x550+x549);
evalcond[4]=(((cj1*x549))+((sj1*x547))+(((-1.0)*sj1*x548))+(((0.27)*sj1))+(((-1.0)*x551))+((cj1*x550))+(((-1.0)*x552)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x553=((27.0)*sj1);
IkReal x554=((50.0)*pp);
IkReal x555=((27.0)*cj1*pz);
CheckValue<IkReal> x556 = IKatan2WithCheck(IkReal(((((-1.0)*(1.1602)*py))+(((-1.0)*py*x555))+((py*x554)))),((((-1.0)*(1.1602)*px))+((px*x554))+(((-1.0)*px*x555))),IKFAST_ATAN2_MAGTHRESH);
if(!x556.valid){
continue;
}
CheckValue<IkReal> x557=IKPowWithIntegerCheck(IKsign((((pp*x553))+(((-1.0)*x553*(pz*pz))))),-1);
if(!x557.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x556.value)+(((1.5707963267949)*(x557.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x558=IKsin(j0);
IkReal x559=IKcos(j0);
IkReal x560=((1.0)*x559);
IkReal x561=(cj1*pz);
IkReal x562=(px*sj1*x559);
IkReal x563=(py*x558);
IkReal x564=(sj1*x563);
IkReal x565=((0.07)*cj2);
IkReal x566=((0.302)*sj2);
IkReal x567=((0.302)*cj2);
IkReal x568=((0.07)*sj2);
IkReal x569=(px*x560);
IkReal x570=((1.0)*x563);
evalcond[0]=(((px*x558))+(((-1.0)*py*x560)));
evalcond[1]=((0.023204)+(((0.54)*x561))+(((0.54)*x564))+(((0.54)*x562))+(((-1.0)*(1.0)*pp)));
evalcond[2]=((-0.27)+(((-1.0)*x565))+x562+x564+x561+x566);
evalcond[3]=(((pz*sj1))+(((-1.0)*cj1*x569))+(((-1.0)*cj1*x570))+x567+x568);
evalcond[4]=((((-1.0)*sj1*x566))+(((-1.0)*x569))+((cj1*x568))+((sj1*x565))+(((0.27)*sj1))+((cj1*x567))+(((-1.0)*x570)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x571=((0.302)*cj2);
IkReal x572=((0.07)*sj2);
IkReal x573=(pz*sj1);
CheckValue<IkReal> x574 = IKatan2WithCheck(IkReal((((py*x573))+((py*x572))+((py*x571)))),(((px*x571))+((px*x573))+((px*x572))),IKFAST_ATAN2_MAGTHRESH);
if(!x574.valid){
continue;
}
CheckValue<IkReal> x575=IKPowWithIntegerCheck(IKsign((((cj1*pp))+(((-1.0)*(1.0)*cj1*(pz*pz))))),-1);
if(!x575.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x574.value)+(((1.5707963267949)*(x575.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x576=IKsin(j0);
IkReal x577=IKcos(j0);
IkReal x578=((1.0)*x577);
IkReal x579=(cj1*pz);
IkReal x580=(px*sj1*x577);
IkReal x581=(py*x576);
IkReal x582=(sj1*x581);
IkReal x583=((0.07)*cj2);
IkReal x584=((0.302)*sj2);
IkReal x585=((0.302)*cj2);
IkReal x586=((0.07)*sj2);
IkReal x587=(px*x578);
IkReal x588=((1.0)*x581);
evalcond[0]=(((px*x576))+(((-1.0)*py*x578)));
evalcond[1]=((0.023204)+(((0.54)*x582))+(((-1.0)*(1.0)*pp))+(((0.54)*x580))+(((0.54)*x579)));
evalcond[2]=((-0.27)+x579+(((-1.0)*x583))+x582+x580+x584);
evalcond[3]=(((pz*sj1))+(((-1.0)*cj1*x587))+(((-1.0)*cj1*x588))+x585+x586);
evalcond[4]=(((sj1*x583))+(((-1.0)*x587))+(((0.27)*sj1))+((cj1*x585))+((cj1*x586))+(((-1.0)*x588))+(((-1.0)*sj1*x584)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x590 = IKatan2WithCheck(IkReal(((-1.0)*(((1.0)*py)))),px,IKFAST_ATAN2_MAGTHRESH);
if(!x590.valid){
continue;
}
IkReal x589=((-1.0)*(x590.value));
j0array[0]=x589;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+x589);
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IkReal j1eval[3];
IkReal x591=(cj0*px);
IkReal x592=(cj2*pz);
IkReal x593=(py*sj0);
IkReal x594=(pz*sj2);
IkReal x595=(cj0*cj2*px);
IkReal x596=(cj0*px*sj2);
IkReal x597=(cj2*py*sj0);
IkReal x598=(py*sj0*sj2);
IkReal x599=(cj2*sj2);
IkReal x600=cj2*cj2;
IkReal x601=((1.0)*pz);
j1eval[0]=((((-4.31428571428571)*x592))+(((4.31428571428571)*x598))+(((-1.0)*x595))+(((-3.85714285714286)*x593))+(((4.31428571428571)*x596))+(((-3.85714285714286)*x591))+(((-1.0)*x597))+(((-1.0)*x594)));
j1eval[1]=((IKabs(((0.02114)+(((-1.0)*x593*x601))+(((-1.0)*(0.0189)*sj2))+(((-1.0)*x591*x601))+(((-1.0)*(0.08154)*cj2))+(((0.086304)*x599))+(((-0.04228)*x600)))))+(IKabs(((-0.164104)+(((0.086304)*x600))+(pz*pz)+(((0.16308)*sj2))+(((0.04228)*x599))+(((-1.0)*(0.0378)*cj2))))));
j1eval[2]=IKsign(((((-0.07)*x595))+(((0.302)*x596))+(((-0.27)*x591))+(((-0.07)*x597))+(((-0.302)*x592))+(((-0.27)*x593))+(((-0.07)*x594))+(((0.302)*x598))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[3];
IkReal x602=(cj0*px);
IkReal x603=(cj2*pz);
IkReal x604=(py*sj0);
IkReal x605=(pz*sj2);
IkReal x606=(cj0*cj2*px);
IkReal x607=(cj0*px*sj2);
IkReal x608=(cj2*py*sj0);
IkReal x609=(py*sj0*sj2);
IkReal x610=(cj2*pp);
IkReal x611=(pp*sj2);
IkReal x612=((27.0)*pz);
j1eval[0]=((((-3.85714285714286)*x604))+(((-1.0)*x606))+(((-3.85714285714286)*x602))+(((-4.31428571428571)*x603))+(((-1.0)*x605))+(((-1.0)*x608))+(((4.31428571428571)*x607))+(((4.31428571428571)*x609)));
j1eval[1]=IKsign(((((-1.89)*x606))+(((-1.89)*x605))+(((-7.29)*x602))+(((-7.29)*x604))+(((8.154)*x607))+(((8.154)*x609))+(((-8.154)*x603))+(((-1.89)*x608))));
j1eval[2]=((IKabs(((0.313254)+(((-1.0)*(0.3503804)*sj2))+(((-3.5)*x610))+(((27.0)*(pz*pz)))+(((-1.0)*(13.5)*pp))+(((0.081214)*cj2))+(((15.1)*x611)))))+(IKabs(((((0.081214)*sj2))+(((-3.5)*x611))+(((-1.0)*x602*x612))+(((-15.1)*x610))+(((0.3503804)*cj2))+(((-1.0)*x604*x612))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[3];
IkReal x613=py*py;
IkReal x614=pz*pz;
IkReal x615=(cj0*px*py*sj0);
IkReal x616=cj0*cj0;
IkReal x617=(x616*(px*px));
IkReal x618=(cj0*px);
IkReal x619=((8.154)*cj2);
IkReal x620=(py*sj0);
IkReal x621=((1.89)*sj2);
IkReal x622=((50.0)*pp);
IkReal x623=((27.0)*x613);
j1eval[0]=(((x613*x616))+(((-1.0)*x617))+(((-1.0)*x614))+(((-2.0)*x615))+(((-1.0)*x613)));
j1eval[1]=((IKabs(((((1.1602)*pz))+(((-1.0)*x619*x620))+(((-1.0)*x618*x621))+(((-1.0)*pz*x622))+(((-1.0)*x620*x621))+(((-1.0)*x618*x619)))))+(IKabs(((((-1.0)*x618*x622))+((pz*x619))+(((1.1602)*x620))+(((-1.0)*x620*x622))+((pz*x621))+(((1.1602)*x618))))));
j1eval[2]=IKsign(((((-27.0)*x614))+((x616*x623))+(((-1.0)*x623))+(((-54.0)*x615))+(((-27.0)*x617))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j1]

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x624=((27.0)*(py*py));
IkReal x625=(py*sj0);
IkReal x626=cj0*cj0;
IkReal x627=(cj0*px);
IkReal x628=((8.154)*cj2);
IkReal x629=((1.89)*sj2);
IkReal x630=((50.0)*pp);
CheckValue<IkReal> x631 = IKatan2WithCheck(IkReal(((((-1.0)*x625*x630))+(((-1.0)*x627*x630))+((pz*x628))+((pz*x629))+(((1.1602)*x627))+(((1.1602)*x625)))),((((-1.0)*pz*x630))+(((1.1602)*pz))+(((-1.0)*x625*x629))+(((-1.0)*x625*x628))+(((-1.0)*x627*x628))+(((-1.0)*x627*x629))),IKFAST_ATAN2_MAGTHRESH);
if(!x631.valid){
continue;
}
CheckValue<IkReal> x632=IKPowWithIntegerCheck(IKsign(((((-1.0)*x624))+((x624*x626))+(((-27.0)*x626*(px*px)))+(((-54.0)*cj0*px*x625))+(((-1.0)*(27.0)*(pz*pz))))),-1);
if(!x632.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x631.value)+(((1.5707963267949)*(x632.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x633=IKcos(j1);
IkReal x634=(pz*x633);
IkReal x635=IKsin(j1);
IkReal x636=(cj0*px);
IkReal x637=(x635*x636);
IkReal x638=(py*sj0);
IkReal x639=(x635*x638);
IkReal x640=((0.07)*cj2);
IkReal x641=((0.302)*sj2);
IkReal x642=((0.302)*cj2);
IkReal x643=((0.07)*sj2);
IkReal x644=((1.0)*x636);
IkReal x645=((1.0)*x638);
evalcond[0]=((0.023204)+(((0.54)*x639))+(((-1.0)*(1.0)*pp))+(((0.54)*x634))+(((0.54)*x637)));
evalcond[1]=((-0.27)+x639+x637+x634+x641+(((-1.0)*x640)));
evalcond[2]=((((-1.0)*x633*x644))+(((-1.0)*x633*x645))+x642+x643+((pz*x635)));
evalcond[3]=(((x633*x641))+(((-1.0)*x633*x640))+((x635*x643))+pz+((x635*x642))+(((-0.27)*x633)));
evalcond[4]=((((-1.0)*x645))+((x633*x642))+(((-1.0)*x644))+(((-1.0)*x635*x641))+((x635*x640))+((x633*x643))+(((0.27)*x635)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x646=(cj0*px);
IkReal x647=(py*sj0);
IkReal x648=((1.89)*cj2);
IkReal x649=((8.154)*sj2);
IkReal x650=(cj2*pp);
IkReal x651=(pp*sj2);
IkReal x652=((27.0)*pz);
CheckValue<IkReal> x653 = IKatan2WithCheck(IkReal(((0.313254)+(((-1.0)*(0.3503804)*sj2))+(((27.0)*(pz*pz)))+(((-1.0)*(13.5)*pp))+(((-3.5)*x650))+(((15.1)*x651))+(((0.081214)*cj2)))),((((0.081214)*sj2))+(((-1.0)*x647*x652))+(((-15.1)*x650))+(((-1.0)*x646*x652))+(((-3.5)*x651))+(((0.3503804)*cj2))),IKFAST_ATAN2_MAGTHRESH);
if(!x653.valid){
continue;
}
CheckValue<IkReal> x654=IKPowWithIntegerCheck(IKsign(((((-7.29)*x647))+(((-7.29)*x646))+(((-1.0)*x647*x648))+(((-1.0)*(8.154)*cj2*pz))+(((-1.0)*(1.89)*pz*sj2))+(((-1.0)*x646*x648))+((x647*x649))+((x646*x649)))),-1);
if(!x654.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x653.value)+(((1.5707963267949)*(x654.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x655=IKcos(j1);
IkReal x656=(pz*x655);
IkReal x657=IKsin(j1);
IkReal x658=(cj0*px);
IkReal x659=(x657*x658);
IkReal x660=(py*sj0);
IkReal x661=(x657*x660);
IkReal x662=((0.07)*cj2);
IkReal x663=((0.302)*sj2);
IkReal x664=((0.302)*cj2);
IkReal x665=((0.07)*sj2);
IkReal x666=((1.0)*x658);
IkReal x667=((1.0)*x660);
evalcond[0]=((0.023204)+(((0.54)*x659))+(((0.54)*x656))+(((0.54)*x661))+(((-1.0)*(1.0)*pp)));
evalcond[1]=((-0.27)+x659+x656+(((-1.0)*x662))+x663+x661);
evalcond[2]=(((pz*x657))+(((-1.0)*x655*x667))+(((-1.0)*x655*x666))+x665+x664);
evalcond[3]=((((-1.0)*x655*x662))+pz+((x655*x663))+((x657*x664))+((x657*x665))+(((-0.27)*x655)));
evalcond[4]=((((0.27)*x657))+(((-1.0)*x666))+(((-1.0)*x667))+(((-1.0)*x657*x663))+((x657*x662))+((x655*x665))+((x655*x664)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x668=(cj0*px);
IkReal x669=(py*sj0);
IkReal x670=((0.07)*cj2);
IkReal x671=((0.302)*sj2);
IkReal x672=(cj2*sj2);
IkReal x673=cj2*cj2;
IkReal x674=((1.0)*pz);
CheckValue<IkReal> x675 = IKatan2WithCheck(IkReal(((-0.164104)+(pz*pz)+(((0.16308)*sj2))+(((-1.0)*(0.0378)*cj2))+(((0.086304)*x673))+(((0.04228)*x672)))),((0.02114)+(((0.086304)*x672))+(((-1.0)*(0.0189)*sj2))+(((-0.04228)*x673))+(((-1.0)*(0.08154)*cj2))+(((-1.0)*x668*x674))+(((-1.0)*x669*x674))),IKFAST_ATAN2_MAGTHRESH);
if(!x675.valid){
continue;
}
CheckValue<IkReal> x676=IKPowWithIntegerCheck(IKsign(((((-1.0)*x669*x670))+(((-0.27)*x669))+(((-1.0)*(0.302)*cj2*pz))+((x668*x671))+(((-1.0)*(0.07)*pz*sj2))+(((-1.0)*x668*x670))+((x669*x671))+(((-0.27)*x668)))),-1);
if(!x676.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x675.value)+(((1.5707963267949)*(x676.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x677=IKcos(j1);
IkReal x678=(pz*x677);
IkReal x679=IKsin(j1);
IkReal x680=(cj0*px);
IkReal x681=(x679*x680);
IkReal x682=(py*sj0);
IkReal x683=(x679*x682);
IkReal x684=((0.07)*cj2);
IkReal x685=((0.302)*sj2);
IkReal x686=((0.302)*cj2);
IkReal x687=((0.07)*sj2);
IkReal x688=((1.0)*x680);
IkReal x689=((1.0)*x682);
evalcond[0]=((0.023204)+(((0.54)*x683))+(((0.54)*x678))+(((0.54)*x681))+(((-1.0)*(1.0)*pp)));
evalcond[1]=((-0.27)+(((-1.0)*x684))+x678+x685+x683+x681);
evalcond[2]=(((pz*x679))+(((-1.0)*x677*x688))+(((-1.0)*x677*x689))+x686+x687);
evalcond[3]=(((x679*x686))+(((-0.27)*x677))+(((-1.0)*x677*x684))+pz+((x677*x685))+((x679*x687)));
evalcond[4]=((((0.27)*x679))+(((-1.0)*x688))+(((-1.0)*x689))+(((-1.0)*x679*x685))+((x677*x686))+((x679*x684))+((x677*x687)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}
}
}
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x87=(sj1*sj2);
IkReal x88=(cj1*cj2);
IkReal x89=(x87+(((-1.0)*x88)));
IkReal x90=((((-1.0)*(1.0)*cj2*sj1))+(((-1.0)*(1.0)*cj1*sj2)));
IkReal x91=(cj0*x90);
IkReal x92=(sj0*x90);
IkReal x93=((1.0)*sj0);
IkReal x94=((((-1.0)*x87))+x88);
IkReal x95=(cj0*x94);
IkReal x96=(sj0*x94);
new_r00=(((r20*x89))+((r10*x92))+((r00*x91)));
new_r01=(((r21*x89))+((r01*x91))+((r11*x92)));
new_r02=(((r02*x91))+((r12*x92))+((r22*x89)));
new_r10=((((-1.0)*r00*x93))+((cj0*r10)));
new_r11=((((-1.0)*r01*x93))+((cj0*r11)));
new_r12=(((cj0*r12))+(((-1.0)*r02*x93)));
new_r20=(((r20*x90))+((r10*x96))+((r00*x95)));
new_r21=(((r21*x90))+((r01*x95))+((r11*x96)));
new_r22=(((r22*x90))+((r02*x95))+((r12*x96)));
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
cj4array[0]=new_r22;
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IkReal j3eval[2];
IkReal x97=(sj1*sj2);
IkReal x98=(cj1*cj2);
IkReal x99=((((-1.0)*x98))+x97);
IkReal x100=((((-1.0)*(1.0)*cj2*sj1))+(((-1.0)*(1.0)*cj1*sj2)));
IkReal x101=(cj0*x100);
IkReal x102=(sj0*x100);
IkReal x103=((1.0)*sj0);
IkReal x104=(x98+(((-1.0)*x97)));
IkReal x105=(cj0*x104);
IkReal x106=(sj0*x104);
new_r00=(((r10*x102))+((r20*x99))+((r00*x101)));
new_r01=(((r01*x101))+((r11*x102))+((r21*x99)));
new_r02=(((r22*x99))+((r02*x101))+((r12*x102)));
new_r10=(((cj0*r10))+(((-1.0)*r00*x103)));
new_r11=(((cj0*r11))+(((-1.0)*r01*x103)));
new_r12=(((cj0*r12))+(((-1.0)*r02*x103)));
new_r20=(((r10*x106))+((r00*x105))+((r20*x100)));
new_r21=(((r11*x106))+((r01*x105))+((r21*x100)));
new_r22=(((r22*x100))+((r12*x106))+((r02*x105)));
j3eval[0]=sj4;
j3eval[1]=IKsign(sj4);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
IkReal x107=(sj1*sj2);
IkReal x108=(cj1*cj2);
IkReal x109=(x107+(((-1.0)*x108)));
IkReal x110=((((-1.0)*(1.0)*cj2*sj1))+(((-1.0)*(1.0)*cj1*sj2)));
IkReal x111=(cj0*x110);
IkReal x112=(sj0*x110);
IkReal x113=((1.0)*sj0);
IkReal x114=((((-1.0)*x107))+x108);
IkReal x115=(cj0*x114);
IkReal x116=(sj0*x114);
new_r00=(((r20*x109))+((r00*x111))+((r10*x112)));
new_r01=(((r21*x109))+((r11*x112))+((r01*x111)));
new_r02=(((r22*x109))+((r12*x112))+((r02*x111)));
new_r10=((((-1.0)*r00*x113))+((cj0*r10)));
new_r11=((((-1.0)*r01*x113))+((cj0*r11)));
new_r12=(((cj0*r12))+(((-1.0)*r02*x113)));
new_r20=(((r10*x116))+((r20*x110))+((r00*x115)));
new_r21=(((r11*x116))+((r21*x110))+((r01*x115)));
new_r22=(((r22*x110))+((r02*x115))+((r12*x116)));
j3eval[0]=sj4;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=new_r20;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
evalcond[5]=new_r21;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
CheckValue<IkReal> x118 = IKatan2WithCheck(IkReal(new_r02),new_r12,IKFAST_ATAN2_MAGTHRESH);
if(!x118.valid){
continue;
}
IkReal x117=((-1.0)*(((1.0)*(x118.value))));
j3array[0]=x117;
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((3.14159265358979)+x117);
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*(1.0)*new_r02*(IKsin(j3))))+((new_r12*(IKcos(j3)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x119=((1.0)*new_r01);
if( IKabs(((((-1.0)*(1.0)*new_r00*sj3))+(((-1.0)*cj3*x119)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj3*x119))+((cj3*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*(1.0)*new_r00*sj3))+(((-1.0)*cj3*x119))))+IKsqr(((((-1.0)*sj3*x119))+((cj3*new_r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*(1.0)*new_r00*sj3))+(((-1.0)*cj3*x119))), ((((-1.0)*sj3*x119))+((cj3*new_r00))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x120=IKsin(j5);
IkReal x121=(cj3*x120);
IkReal x122=IKcos(j5);
IkReal x123=((1.0)*x122);
IkReal x124=((-1.0)*x123);
IkReal x125=((1.0)*sj3);
IkReal x126=(((sj3*x120))+(((-1.0)*cj3*x123)));
evalcond[0]=(x120+((new_r11*sj3))+((cj3*new_r01)));
evalcond[1]=(x121+((sj3*x122))+new_r01);
evalcond[2]=(x124+((new_r10*sj3))+((cj3*new_r00)));
evalcond[3]=(((cj3*new_r10))+(((-1.0)*x120))+(((-1.0)*new_r00*x125)));
evalcond[4]=(((cj3*new_r11))+(((-1.0)*new_r01*x125))+x124);
evalcond[5]=(x126+new_r00);
evalcond[6]=(x126+new_r11);
evalcond[7]=((((-1.0)*x121))+(((-1.0)*x122*x125))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
evalcond[1]=((1.0)+new_r22);
evalcond[2]=new_r20;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
evalcond[5]=new_r21;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
CheckValue<IkReal> x128 = IKatan2WithCheck(IkReal(new_r02),new_r12,IKFAST_ATAN2_MAGTHRESH);
if(!x128.valid){
continue;
}
IkReal x127=((-1.0)*(((1.0)*(x128.value))));
j3array[0]=x127;
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((3.14159265358979)+x127);
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*(1.0)*new_r02*(IKsin(j3))))+((new_r12*(IKcos(j3)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x129=((1.0)*new_r00);
if( IKabs(((((-1.0)*sj3*x129))+((cj3*new_r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj3*x129))+(((-1.0)*(1.0)*new_r01*sj3)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj3*x129))+((cj3*new_r01))))+IKsqr(((((-1.0)*cj3*x129))+(((-1.0)*(1.0)*new_r01*sj3))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*sj3*x129))+((cj3*new_r01))), ((((-1.0)*cj3*x129))+(((-1.0)*(1.0)*new_r01*sj3))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x130=IKcos(j5);
IkReal x131=IKsin(j5);
IkReal x132=((1.0)*x131);
IkReal x133=((-1.0)*x132);
IkReal x134=(cj3*x130);
IkReal x135=((1.0)*sj3);
IkReal x136=((((-1.0)*cj3*x132))+((sj3*x130)));
evalcond[0]=(x130+((new_r10*sj3))+((cj3*new_r00)));
evalcond[1]=(x133+((new_r11*sj3))+((cj3*new_r01)));
evalcond[2]=(x134+((sj3*x131))+new_r00);
evalcond[3]=(((cj3*new_r10))+x133+(((-1.0)*new_r00*x135)));
evalcond[4]=(((cj3*new_r11))+(((-1.0)*new_r01*x135))+(((-1.0)*x130)));
evalcond[5]=(x136+new_r01);
evalcond[6]=(x136+new_r10);
evalcond[7]=((((-1.0)*x134))+(((-1.0)*x131*x135))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x138=IKPowWithIntegerCheck(sj4,-1);
if(!x138.valid){
continue;
}
IkReal x137=x138.value;
CheckValue<IkReal> x139=IKPowWithIntegerCheck(new_r12,-1);
if(!x139.valid){
continue;
}
if( IKabs((x137*(x139.value)*(((1.0)+(((-1.0)*(1.0)*(new_r02*new_r02)))+(((-1.0)*(1.0)*(cj4*cj4))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r02*x137)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x137*(x139.value)*(((1.0)+(((-1.0)*(1.0)*(new_r02*new_r02)))+(((-1.0)*(1.0)*(cj4*cj4)))))))+IKsqr((new_r02*x137))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((x137*(x139.value)*(((1.0)+(((-1.0)*(1.0)*(new_r02*new_r02)))+(((-1.0)*(1.0)*(cj4*cj4)))))), (new_r02*x137));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x140=IKcos(j3);
IkReal x141=((1.0)*sj4);
IkReal x142=IKsin(j3);
IkReal x143=(new_r02*x140);
IkReal x144=(new_r12*x142);
IkReal x145=(sj4*x140);
IkReal x146=(sj4*x142);
evalcond[0]=((((-1.0)*x140*x141))+new_r02);
evalcond[1]=(new_r12+(((-1.0)*x141*x142)));
evalcond[2]=(((new_r12*x140))+(((-1.0)*new_r02*x142)));
evalcond[3]=(x143+x144+(((-1.0)*x141)));
evalcond[4]=(((new_r00*x145))+((new_r10*x146))+((cj4*new_r20)));
evalcond[5]=(((new_r11*x146))+((new_r01*x145))+((cj4*new_r21)));
evalcond[6]=((-1.0)+((sj4*x144))+((sj4*x143))+((cj4*new_r22)));
evalcond[7]=(((cj4*x144))+((cj4*x143))+(((-1.0)*new_r22*x141)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[2];
IkReal x147=(sj1*sj2);
IkReal x148=(cj1*cj2);
IkReal x149=(x147+(((-1.0)*x148)));
IkReal x150=((((-1.0)*(1.0)*cj2*sj1))+(((-1.0)*(1.0)*cj1*sj2)));
IkReal x151=(cj0*x150);
IkReal x152=(sj0*x150);
IkReal x153=((1.0)*sj0);
IkReal x154=(x148+(((-1.0)*x147)));
IkReal x155=(cj0*x154);
IkReal x156=(sj0*x154);
new_r00=(((r20*x149))+((r00*x151))+((r10*x152)));
new_r01=(((r01*x151))+((r11*x152))+((r21*x149)));
new_r02=(((r02*x151))+((r12*x152))+((r22*x149)));
new_r10=((((-1.0)*r00*x153))+((cj0*r10)));
new_r11=((((-1.0)*r01*x153))+((cj0*r11)));
new_r12=(((cj0*r12))+(((-1.0)*r02*x153)));
new_r20=(((r00*x155))+((r20*x150))+((r10*x156)));
new_r21=(((r11*x156))+((r01*x155))+((r21*x150)));
new_r22=(((r02*x155))+((r22*x150))+((r12*x156)));
j5eval[0]=sj4;
j5eval[1]=IKsign(sj4);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
IkReal x157=(sj1*sj2);
IkReal x158=(cj1*cj2);
IkReal x159=((((-1.0)*x158))+x157);
IkReal x160=((((-1.0)*(1.0)*cj2*sj1))+(((-1.0)*(1.0)*cj1*sj2)));
IkReal x161=(cj0*x160);
IkReal x162=(sj0*x160);
IkReal x163=((1.0)*sj0);
IkReal x164=((((-1.0)*x157))+x158);
IkReal x165=(cj0*x164);
IkReal x166=(sj0*x164);
new_r00=(((r20*x159))+((r00*x161))+((r10*x162)));
new_r01=(((r21*x159))+((r01*x161))+((r11*x162)));
new_r02=(((r12*x162))+((r22*x159))+((r02*x161)));
new_r10=((((-1.0)*r00*x163))+((cj0*r10)));
new_r11=((((-1.0)*r01*x163))+((cj0*r11)));
new_r12=(((cj0*r12))+(((-1.0)*r02*x163)));
new_r20=(((r20*x160))+((r10*x166))+((r00*x165)));
new_r21=(((r11*x166))+((r21*x160))+((r01*x165)));
new_r22=(((r02*x165))+((r22*x160))+((r12*x166)));
j5eval[0]=sj3;
j5eval[1]=sj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
IkReal x167=(sj1*sj2);
IkReal x168=(cj1*cj2);
IkReal x169=((((-1.0)*x168))+x167);
IkReal x170=((((-1.0)*(1.0)*cj2*sj1))+(((-1.0)*(1.0)*cj1*sj2)));
IkReal x171=(cj0*x170);
IkReal x172=(sj0*x170);
IkReal x173=((1.0)*sj0);
IkReal x174=(x168+(((-1.0)*x167)));
IkReal x175=(cj0*x174);
IkReal x176=(sj0*x174);
new_r00=(((r10*x172))+((r20*x169))+((r00*x171)));
new_r01=(((r01*x171))+((r11*x172))+((r21*x169)));
new_r02=(((r22*x169))+((r12*x172))+((r02*x171)));
new_r10=((((-1.0)*r00*x173))+((cj0*r10)));
new_r11=((((-1.0)*r01*x173))+((cj0*r11)));
new_r12=(((cj0*r12))+(((-1.0)*r02*x173)));
new_r20=(((r20*x170))+((r10*x176))+((r00*x175)));
new_r21=(((r01*x175))+((r21*x170))+((r11*x176)));
new_r22=(((r12*x176))+((r22*x170))+((r02*x175)));
j5eval[0]=cj3;
j5eval[1]=cj4;
j5eval[2]=sj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[12];
bool bgotonextstatement = true;
do
{
IkReal x177=((((-1.0)*(1.0)*cj4))+new_r22);
IkReal x178=((1.0)*sj4);
IkReal x179=((((-1.0)*x178))+new_r12);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=x177;
evalcond[2]=x177;
evalcond[3]=new_r02;
evalcond[4]=x179;
evalcond[5]=x179;
evalcond[6]=(((cj4*new_r20))+((new_r10*sj4)));
evalcond[7]=(((new_r11*sj4))+((cj4*new_r21)));
evalcond[8]=((-1.0)+((new_r12*sj4))+((cj4*new_r22)));
evalcond[9]=(((cj4*new_r12))+(((-1.0)*new_r22*x178)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x180=IKPowWithIntegerCheck(IKsign(new_r12),-1);
if(!x180.valid){
continue;
}
CheckValue<IkReal> x181 = IKatan2WithCheck(IkReal(new_r21),((-1.0)*(((1.0)*new_r20))),IKFAST_ATAN2_MAGTHRESH);
if(!x181.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x180.value)))+(x181.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x182=IKcos(j5);
IkReal x183=IKsin(j5);
IkReal x184=((1.0)*new_r12);
IkReal x185=((1.0)*x182);
IkReal x186=((-1.0)*x185);
evalcond[0]=(((new_r12*x182))+new_r20);
evalcond[1]=(((new_r22*x183))+new_r11);
evalcond[2]=((((-1.0)*x183*x184))+new_r21);
evalcond[3]=((((-1.0)*new_r22*x185))+new_r10);
evalcond[4]=((((-1.0)*(1.0)*new_r00))+(((-1.0)*x183)));
evalcond[5]=((((-1.0)*(1.0)*new_r01))+x186);
evalcond[6]=(((new_r11*new_r22))+(((-1.0)*new_r21*x184))+x183);
evalcond[7]=(((new_r10*new_r22))+(((-1.0)*new_r20*x184))+x186);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x187=((1.0)*cj4);
IkReal x188=((((-1.0)*x187))+new_r22);
IkReal x189=((1.0)*new_r12);
IkReal x190=((1.0)*sj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=x188;
evalcond[2]=x188;
evalcond[3]=new_r02;
evalcond[4]=(sj4+new_r12);
evalcond[5]=((((-1.0)*x190))+(((-1.0)*x189)));
evalcond[6]=(((cj4*new_r20))+(((-1.0)*new_r10*x190)));
evalcond[7]=((((-1.0)*new_r11*x190))+((cj4*new_r21)));
evalcond[8]=((-1.0)+(((-1.0)*sj4*x189))+((cj4*new_r22)));
evalcond[9]=((((-1.0)*new_r12*x187))+(((-1.0)*new_r22*x190)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(new_r00, new_r01);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x191=IKsin(j5);
IkReal x192=((1.0)*(IKcos(j5)));
IkReal x193=((-1.0)*x192);
IkReal x194=((1.0)*new_r11);
IkReal x195=((1.0)*new_r10);
evalcond[0]=(((new_r12*x191))+new_r21);
evalcond[1]=((((-1.0)*x191))+new_r00);
evalcond[2]=(new_r01+x193);
evalcond[3]=((((-1.0)*new_r12*x192))+new_r20);
evalcond[4]=((((-1.0)*x194))+((new_r22*x191)));
evalcond[5]=((((-1.0)*x195))+(((-1.0)*new_r22*x192)));
evalcond[6]=(((new_r12*new_r21))+(((-1.0)*new_r22*x194))+x191);
evalcond[7]=(((new_r12*new_r20))+x193+(((-1.0)*new_r22*x195)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x196=((1.0)*sj3);
IkReal x197=((((-1.0)*new_r02*x196))+((cj3*new_r12)));
IkReal x198=((-1.0)+((new_r12*sj3))+((cj3*new_r02)));
IkReal x199=(((new_r11*sj3))+((cj3*new_r01)));
IkReal x200=(((new_r10*sj3))+((cj3*new_r00)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=((((-1.0)*(1.0)*cj3))+new_r02);
evalcond[3]=((((-1.0)*x196))+new_r12);
evalcond[4]=x197;
evalcond[5]=x197;
evalcond[6]=x198;
evalcond[7]=x199;
evalcond[8]=x200;
evalcond[9]=x200;
evalcond[10]=x199;
evalcond[11]=x198;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*(((1.0)*new_r20)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((-1.0)*(((1.0)*new_r20))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(new_r21, ((-1.0)*(((1.0)*new_r20))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x201=IKcos(j5);
IkReal x202=IKsin(j5);
IkReal x203=((1.0)*x202);
IkReal x204=((-1.0)*x203);
IkReal x205=((1.0)*x201);
IkReal x206=((1.0)*new_r12);
evalcond[0]=(x201+new_r20);
evalcond[1]=(x204+new_r21);
evalcond[2]=(((new_r12*x201))+new_r01);
evalcond[3]=(new_r00+((new_r12*x202)));
evalcond[4]=((((-1.0)*new_r02*x205))+new_r11);
evalcond[5]=((((-1.0)*new_r02*x203))+new_r10);
evalcond[6]=(x204+(((-1.0)*new_r00*x206))+((new_r02*new_r10)));
evalcond[7]=((((-1.0)*x205))+((new_r02*new_r11))+(((-1.0)*new_r01*x206)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x207=((((-1.0)*(1.0)*new_r02*sj3))+((cj3*new_r12)));
IkReal x208=(cj3*new_r02);
IkReal x209=(new_r12*sj3);
IkReal x210=(cj3*new_r01);
IkReal x211=(new_r11*sj3);
IkReal x212=(cj3*new_r00);
IkReal x213=(new_r10*sj3);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=(cj3+new_r02);
evalcond[3]=(sj3+new_r12);
evalcond[4]=x207;
evalcond[5]=x207;
evalcond[6]=((1.0)+x209+x208);
evalcond[7]=(x211+x210);
evalcond[8]=(x213+x212);
evalcond[9]=((((-1.0)*x212))+(((-1.0)*x213)));
evalcond[10]=((((-1.0)*x210))+(((-1.0)*x211)));
evalcond[11]=((-1.0)+(((-1.0)*x209))+(((-1.0)*x208)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((-1.0)*(((1.0)*new_r21)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(((1.0)*new_r21))))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-1.0)*(((1.0)*new_r21))), new_r20);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x214=IKsin(j5);
IkReal x215=IKcos(j5);
IkReal x216=((1.0)*x215);
IkReal x217=((-1.0)*x216);
IkReal x218=((1.0)*x214);
IkReal x219=((1.0)*new_r02);
evalcond[0]=(x214+new_r21);
evalcond[1]=(x217+new_r20);
evalcond[2]=(new_r11+((new_r02*x215)));
evalcond[3]=(((new_r02*x214))+new_r10);
evalcond[4]=((((-1.0)*new_r12*x216))+new_r01);
evalcond[5]=((((-1.0)*new_r12*x218))+new_r00);
evalcond[6]=((((-1.0)*new_r10*x219))+((new_r00*new_r12))+(((-1.0)*x218)));
evalcond[7]=(((new_r01*new_r12))+(((-1.0)*new_r11*x219))+x217);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x220=((((-1.0)*(1.0)*new_r02*sj3))+((cj3*new_r12)));
IkReal x221=(((new_r12*sj3))+((cj3*new_r02)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=new_r20;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
evalcond[5]=new_r21;
evalcond[6]=x220;
evalcond[7]=x220;
evalcond[8]=x221;
evalcond[9]=x221;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x222=((1.0)*new_r01);
if( IKabs(((((-1.0)*(1.0)*new_r00*sj3))+(((-1.0)*cj3*x222)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj3*new_r00))+(((-1.0)*sj3*x222)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*(1.0)*new_r00*sj3))+(((-1.0)*cj3*x222))))+IKsqr((((cj3*new_r00))+(((-1.0)*sj3*x222))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*(1.0)*new_r00*sj3))+(((-1.0)*cj3*x222))), (((cj3*new_r00))+(((-1.0)*sj3*x222))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x223=IKsin(j5);
IkReal x224=(cj3*x223);
IkReal x225=IKcos(j5);
IkReal x226=((1.0)*x225);
IkReal x227=((-1.0)*x226);
IkReal x228=((1.0)*sj3);
IkReal x229=(((sj3*x223))+(((-1.0)*cj3*x226)));
evalcond[0]=(((new_r11*sj3))+((cj3*new_r01))+x223);
evalcond[1]=(((sj3*x225))+new_r01+x224);
evalcond[2]=(((new_r10*sj3))+((cj3*new_r00))+x227);
evalcond[3]=(((cj3*new_r10))+(((-1.0)*new_r00*x228))+(((-1.0)*x223)));
evalcond[4]=(((cj3*new_r11))+(((-1.0)*new_r01*x228))+x227);
evalcond[5]=(new_r00+x229);
evalcond[6]=(new_r11+x229);
evalcond[7]=((((-1.0)*x224))+new_r10+(((-1.0)*x225*x228)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x230=((((-1.0)*(1.0)*new_r02*sj3))+((cj3*new_r12)));
IkReal x231=(cj3*new_r02);
IkReal x232=(new_r12*sj3);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
evalcond[1]=((1.0)+new_r22);
evalcond[2]=new_r20;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
evalcond[5]=new_r21;
evalcond[6]=x230;
evalcond[7]=x230;
evalcond[8]=(x231+x232);
evalcond[9]=((((-1.0)*x232))+(((-1.0)*x231)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x233=((1.0)*new_r00);
if( IKabs((((cj3*new_r01))+(((-1.0)*sj3*x233)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj3*x233))+(((-1.0)*(1.0)*new_r01*sj3)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj3*new_r01))+(((-1.0)*sj3*x233))))+IKsqr(((((-1.0)*cj3*x233))+(((-1.0)*(1.0)*new_r01*sj3))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((((cj3*new_r01))+(((-1.0)*sj3*x233))), ((((-1.0)*cj3*x233))+(((-1.0)*(1.0)*new_r01*sj3))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x234=IKcos(j5);
IkReal x235=IKsin(j5);
IkReal x236=((1.0)*x235);
IkReal x237=((-1.0)*x236);
IkReal x238=(cj3*x234);
IkReal x239=((1.0)*sj3);
IkReal x240=(((sj3*x234))+(((-1.0)*cj3*x236)));
evalcond[0]=(((new_r10*sj3))+((cj3*new_r00))+x234);
evalcond[1]=(((new_r11*sj3))+((cj3*new_r01))+x237);
evalcond[2]=(((sj3*x235))+new_r00+x238);
evalcond[3]=(((cj3*new_r10))+(((-1.0)*new_r00*x239))+x237);
evalcond[4]=(((cj3*new_r11))+(((-1.0)*new_r01*x239))+(((-1.0)*x234)));
evalcond[5]=(x240+new_r01);
evalcond[6]=(x240+new_r10);
evalcond[7]=((((-1.0)*x235*x239))+(((-1.0)*x238))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x241=((((-1.0)*(1.0)*cj4))+new_r22);
IkReal x242=((1.0)*sj4);
IkReal x243=((((-1.0)*x242))+new_r02);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=x241;
evalcond[2]=x241;
evalcond[3]=x243;
evalcond[4]=new_r12;
evalcond[5]=x243;
evalcond[6]=(((new_r00*sj4))+((cj4*new_r20)));
evalcond[7]=(((cj4*new_r21))+((new_r01*sj4)));
evalcond[8]=((-1.0)+((new_r02*sj4))+((cj4*new_r22)));
evalcond[9]=(((cj4*new_r02))+(((-1.0)*new_r22*x242)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(new_r10, new_r11);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x244=IKcos(j5);
IkReal x245=IKsin(j5);
IkReal x246=((1.0)*x244);
IkReal x247=((-1.0)*x246);
IkReal x248=((1.0)*new_r02);
evalcond[0]=(((new_r02*x244))+new_r20);
evalcond[1]=((((-1.0)*x245))+new_r10);
evalcond[2]=(x247+new_r11);
evalcond[3]=(((new_r22*x245))+new_r01);
evalcond[4]=((((-1.0)*x245*x248))+new_r21);
evalcond[5]=(new_r00+(((-1.0)*new_r22*x246)));
evalcond[6]=((((-1.0)*new_r21*x248))+x245+((new_r01*new_r22)));
evalcond[7]=(x247+((new_r00*new_r22))+(((-1.0)*new_r20*x248)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x249=((1.0)*cj4);
IkReal x250=((((-1.0)*x249))+new_r22);
IkReal x251=((1.0)*new_r02);
IkReal x252=((1.0)*sj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=x250;
evalcond[2]=x250;
evalcond[3]=(sj4+new_r02);
evalcond[4]=new_r12;
evalcond[5]=((((-1.0)*x252))+(((-1.0)*x251)));
evalcond[6]=(((cj4*new_r20))+(((-1.0)*new_r00*x252)));
evalcond[7]=((((-1.0)*new_r01*x252))+((cj4*new_r21)));
evalcond[8]=((-1.0)+(((-1.0)*sj4*x251))+((cj4*new_r22)));
evalcond[9]=((((-1.0)*new_r02*x249))+(((-1.0)*new_r22*x252)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x253 = IKatan2WithCheck(IkReal(((-1.0)*(((1.0)*new_r21)))),new_r20,IKFAST_ATAN2_MAGTHRESH);
if(!x253.valid){
continue;
}
CheckValue<IkReal> x254=IKPowWithIntegerCheck(IKsign(new_r02),-1);
if(!x254.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x253.value)+(((1.5707963267949)*(x254.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x255=IKsin(j5);
IkReal x256=((1.0)*(IKcos(j5)));
IkReal x257=((-1.0)*x256);
IkReal x258=((1.0)*new_r01);
IkReal x259=((1.0)*new_r00);
evalcond[0]=(((new_r02*x255))+new_r21);
evalcond[1]=((((-1.0)*new_r02*x256))+new_r20);
evalcond[2]=((((-1.0)*x255))+(((-1.0)*(1.0)*new_r10)));
evalcond[3]=(x257+(((-1.0)*(1.0)*new_r11)));
evalcond[4]=((((-1.0)*x258))+((new_r22*x255)));
evalcond[5]=((((-1.0)*new_r22*x256))+(((-1.0)*x259)));
evalcond[6]=(((new_r02*new_r21))+(((-1.0)*new_r22*x258))+x255);
evalcond[7]=(((new_r02*new_r20))+(((-1.0)*new_r22*x259))+x257);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x261=IKPowWithIntegerCheck(sj4,-1);
if(!x261.valid){
continue;
}
IkReal x260=x261.value;
CheckValue<IkReal> x262=IKPowWithIntegerCheck(cj3,-1);
if(!x262.valid){
continue;
}
CheckValue<IkReal> x263=IKPowWithIntegerCheck(cj4,-1);
if(!x263.valid){
continue;
}
if( IKabs((x260*(x262.value)*(x263.value)*(((((-1.0)*(1.0)*new_r01*sj4))+((new_r20*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x260)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x260*(x262.value)*(x263.value)*(((((-1.0)*(1.0)*new_r01*sj4))+((new_r20*sj3))))))+IKsqr(((-1.0)*new_r20*x260))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((x260*(x262.value)*(x263.value)*(((((-1.0)*(1.0)*new_r01*sj4))+((new_r20*sj3))))), ((-1.0)*new_r20*x260));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[12];
IkReal x264=IKcos(j5);
IkReal x265=IKsin(j5);
IkReal x266=((1.0)*sj4);
IkReal x267=(cj3*new_r01);
IkReal x268=(new_r11*sj3);
IkReal x269=(cj4*x265);
IkReal x270=((1.0)*sj3);
IkReal x271=((1.0)*x265);
IkReal x272=((1.0)*x264);
IkReal x273=((-1.0)*x272);
IkReal x274=(cj3*new_r00);
IkReal x275=(new_r10*sj3);
IkReal x276=(cj3*x272);
evalcond[0]=(((sj4*x264))+new_r20);
evalcond[1]=((((-1.0)*x265*x266))+new_r21);
evalcond[2]=(x268+x269+x267);
evalcond[3]=(((cj3*new_r10))+(((-1.0)*x271))+(((-1.0)*new_r00*x270)));
evalcond[4]=(((cj3*new_r11))+x273+(((-1.0)*new_r01*x270)));
evalcond[5]=(((cj3*x269))+new_r01+((sj3*x264)));
evalcond[6]=((((-1.0)*cj4*x272))+x274+x275);
evalcond[7]=((((-1.0)*cj4*x276))+((sj3*x265))+new_r00);
evalcond[8]=(((sj3*x269))+(((-1.0)*x276))+new_r11);
evalcond[9]=((((-1.0)*cj4*x264*x270))+new_r10+(((-1.0)*cj3*x271)));
evalcond[10]=(x265+(((-1.0)*new_r21*x266))+((cj4*x267))+((cj4*x268)));
evalcond[11]=(((cj4*x275))+((cj4*x274))+x273+(((-1.0)*new_r20*x266)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x279=IKPowWithIntegerCheck(sj4,-1);
if(!x279.valid){
continue;
}
IkReal x277=x279.value;
IkReal x278=((1.0)*new_r20);
CheckValue<IkReal> x280=IKPowWithIntegerCheck(sj3,-1);
if(!x280.valid){
continue;
}
if( IKabs((x277*(x280.value)*(((((-1.0)*(1.0)*new_r00*sj4))+(((-1.0)*cj3*cj4*x278)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*x277*x278)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x277*(x280.value)*(((((-1.0)*(1.0)*new_r00*sj4))+(((-1.0)*cj3*cj4*x278))))))+IKsqr(((-1.0)*x277*x278))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((x277*(x280.value)*(((((-1.0)*(1.0)*new_r00*sj4))+(((-1.0)*cj3*cj4*x278))))), ((-1.0)*x277*x278));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[12];
IkReal x281=IKcos(j5);
IkReal x282=IKsin(j5);
IkReal x283=((1.0)*sj4);
IkReal x284=(cj3*new_r01);
IkReal x285=(new_r11*sj3);
IkReal x286=(cj4*x282);
IkReal x287=((1.0)*sj3);
IkReal x288=((1.0)*x282);
IkReal x289=((1.0)*x281);
IkReal x290=((-1.0)*x289);
IkReal x291=(cj3*new_r00);
IkReal x292=(new_r10*sj3);
IkReal x293=(cj3*x289);
evalcond[0]=(((sj4*x281))+new_r20);
evalcond[1]=((((-1.0)*x282*x283))+new_r21);
evalcond[2]=(x285+x284+x286);
evalcond[3]=(((cj3*new_r10))+(((-1.0)*x288))+(((-1.0)*new_r00*x287)));
evalcond[4]=(((cj3*new_r11))+(((-1.0)*new_r01*x287))+x290);
evalcond[5]=(((cj3*x286))+((sj3*x281))+new_r01);
evalcond[6]=(x291+x292+(((-1.0)*cj4*x289)));
evalcond[7]=(((sj3*x282))+(((-1.0)*cj4*x293))+new_r00);
evalcond[8]=((((-1.0)*x293))+((sj3*x286))+new_r11);
evalcond[9]=((((-1.0)*cj3*x288))+(((-1.0)*cj4*x281*x287))+new_r10);
evalcond[10]=((((-1.0)*new_r21*x283))+((cj4*x285))+x282+((cj4*x284)));
evalcond[11]=(x290+((cj4*x292))+((cj4*x291))+(((-1.0)*new_r20*x283)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x294=IKPowWithIntegerCheck(IKsign(sj4),-1);
if(!x294.valid){
continue;
}
CheckValue<IkReal> x295 = IKatan2WithCheck(IkReal(new_r21),((-1.0)*(((1.0)*new_r20))),IKFAST_ATAN2_MAGTHRESH);
if(!x295.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x294.value)))+(x295.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[12];
IkReal x296=IKcos(j5);
IkReal x297=IKsin(j5);
IkReal x298=((1.0)*sj4);
IkReal x299=(cj3*new_r01);
IkReal x300=(new_r11*sj3);
IkReal x301=(cj4*x297);
IkReal x302=((1.0)*sj3);
IkReal x303=((1.0)*x297);
IkReal x304=((1.0)*x296);
IkReal x305=((-1.0)*x304);
IkReal x306=(cj3*new_r00);
IkReal x307=(new_r10*sj3);
IkReal x308=(cj3*x304);
evalcond[0]=(((sj4*x296))+new_r20);
evalcond[1]=((((-1.0)*x297*x298))+new_r21);
evalcond[2]=(x299+x301+x300);
evalcond[3]=(((cj3*new_r10))+(((-1.0)*new_r00*x302))+(((-1.0)*x303)));
evalcond[4]=(((cj3*new_r11))+x305+(((-1.0)*new_r01*x302)));
evalcond[5]=(((sj3*x296))+((cj3*x301))+new_r01);
evalcond[6]=(x306+x307+(((-1.0)*cj4*x304)));
evalcond[7]=(((sj3*x297))+(((-1.0)*cj4*x308))+new_r00);
evalcond[8]=((((-1.0)*x308))+new_r11+((sj3*x301)));
evalcond[9]=((((-1.0)*cj3*x303))+new_r10+(((-1.0)*cj4*x296*x302)));
evalcond[10]=(((cj4*x300))+x297+((cj4*x299))+(((-1.0)*new_r21*x298)));
evalcond[11]=(x305+((cj4*x307))+((cj4*x306))+(((-1.0)*new_r20*x298)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x309=IKPowWithIntegerCheck(IKsign(sj4),-1);
if(!x309.valid){
continue;
}
CheckValue<IkReal> x310 = IKatan2WithCheck(IkReal(new_r12),new_r02,IKFAST_ATAN2_MAGTHRESH);
if(!x310.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x309.value)))+(x310.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x311=IKcos(j3);
IkReal x312=((1.0)*sj4);
IkReal x313=IKsin(j3);
IkReal x314=(new_r02*x311);
IkReal x315=(new_r12*x313);
IkReal x316=(sj4*x311);
IkReal x317=(sj4*x313);
evalcond[0]=((((-1.0)*x311*x312))+new_r02);
evalcond[1]=((((-1.0)*x312*x313))+new_r12);
evalcond[2]=(((new_r12*x311))+(((-1.0)*new_r02*x313)));
evalcond[3]=(x315+x314+(((-1.0)*x312)));
evalcond[4]=(((new_r10*x317))+((cj4*new_r20))+((new_r00*x316)));
evalcond[5]=(((new_r01*x316))+((cj4*new_r21))+((new_r11*x317)));
evalcond[6]=((-1.0)+((sj4*x315))+((cj4*new_r22))+((sj4*x314)));
evalcond[7]=(((cj4*x314))+(((-1.0)*new_r22*x312))+((cj4*x315)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[2];
IkReal x318=(sj1*sj2);
IkReal x319=(cj1*cj2);
IkReal x320=((((-1.0)*x319))+x318);
IkReal x321=((((-1.0)*(1.0)*cj2*sj1))+(((-1.0)*(1.0)*cj1*sj2)));
IkReal x322=(cj0*x321);
IkReal x323=(sj0*x321);
IkReal x324=((1.0)*sj0);
IkReal x325=((((-1.0)*x318))+x319);
IkReal x326=(cj0*x325);
IkReal x327=(sj0*x325);
new_r00=(((r10*x323))+((r00*x322))+((r20*x320)));
new_r01=(((r01*x322))+((r21*x320))+((r11*x323)));
new_r02=(((r12*x323))+((r02*x322))+((r22*x320)));
new_r10=(((cj0*r10))+(((-1.0)*r00*x324)));
new_r11=((((-1.0)*r01*x324))+((cj0*r11)));
new_r12=(((cj0*r12))+(((-1.0)*r02*x324)));
new_r20=(((r10*x327))+((r20*x321))+((r00*x326)));
new_r21=(((r21*x321))+((r01*x326))+((r11*x327)));
new_r22=(((r12*x327))+((r02*x326))+((r22*x321)));
j5eval[0]=sj4;
j5eval[1]=IKsign(sj4);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
IkReal x328=(sj1*sj2);
IkReal x329=(cj1*cj2);
IkReal x330=((((-1.0)*x329))+x328);
IkReal x331=((((-1.0)*(1.0)*cj2*sj1))+(((-1.0)*(1.0)*cj1*sj2)));
IkReal x332=(cj0*x331);
IkReal x333=(sj0*x331);
IkReal x334=((1.0)*sj0);
IkReal x335=(x329+(((-1.0)*x328)));
IkReal x336=(cj0*x335);
IkReal x337=(sj0*x335);
new_r00=(((r20*x330))+((r00*x332))+((r10*x333)));
new_r01=(((r21*x330))+((r01*x332))+((r11*x333)));
new_r02=(((r02*x332))+((r22*x330))+((r12*x333)));
new_r10=((((-1.0)*r00*x334))+((cj0*r10)));
new_r11=((((-1.0)*r01*x334))+((cj0*r11)));
new_r12=(((cj0*r12))+(((-1.0)*r02*x334)));
new_r20=(((r20*x331))+((r00*x336))+((r10*x337)));
new_r21=(((r21*x331))+((r11*x337))+((r01*x336)));
new_r22=(((r12*x337))+((r22*x331))+((r02*x336)));
j5eval[0]=sj3;
j5eval[1]=sj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
IkReal x338=(sj1*sj2);
IkReal x339=(cj1*cj2);
IkReal x340=((((-1.0)*x339))+x338);
IkReal x341=((((-1.0)*(1.0)*cj2*sj1))+(((-1.0)*(1.0)*cj1*sj2)));
IkReal x342=(cj0*x341);
IkReal x343=(sj0*x341);
IkReal x344=((1.0)*sj0);
IkReal x345=((((-1.0)*x338))+x339);
IkReal x346=(cj0*x345);
IkReal x347=(sj0*x345);
new_r00=(((r20*x340))+((r10*x343))+((r00*x342)));
new_r01=(((r11*x343))+((r21*x340))+((r01*x342)));
new_r02=(((r22*x340))+((r12*x343))+((r02*x342)));
new_r10=(((cj0*r10))+(((-1.0)*r00*x344)));
new_r11=((((-1.0)*r01*x344))+((cj0*r11)));
new_r12=(((cj0*r12))+(((-1.0)*r02*x344)));
new_r20=(((r00*x346))+((r20*x341))+((r10*x347)));
new_r21=(((r11*x347))+((r21*x341))+((r01*x346)));
new_r22=(((r22*x341))+((r02*x346))+((r12*x347)));
j5eval[0]=cj3;
j5eval[1]=cj4;
j5eval[2]=sj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[12];
bool bgotonextstatement = true;
do
{
IkReal x348=((((-1.0)*(1.0)*cj4))+new_r22);
IkReal x349=((1.0)*sj4);
IkReal x350=((((-1.0)*x349))+new_r12);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=x348;
evalcond[2]=x348;
evalcond[3]=new_r02;
evalcond[4]=x350;
evalcond[5]=x350;
evalcond[6]=(((cj4*new_r20))+((new_r10*sj4)));
evalcond[7]=(((new_r11*sj4))+((cj4*new_r21)));
evalcond[8]=((-1.0)+((new_r12*sj4))+((cj4*new_r22)));
evalcond[9]=((((-1.0)*new_r22*x349))+((cj4*new_r12)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x351=IKPowWithIntegerCheck(IKsign(new_r12),-1);
if(!x351.valid){
continue;
}
CheckValue<IkReal> x352 = IKatan2WithCheck(IkReal(new_r21),((-1.0)*(((1.0)*new_r20))),IKFAST_ATAN2_MAGTHRESH);
if(!x352.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x351.value)))+(x352.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x353=IKcos(j5);
IkReal x354=IKsin(j5);
IkReal x355=((1.0)*new_r12);
IkReal x356=((1.0)*x353);
IkReal x357=((-1.0)*x356);
evalcond[0]=(((new_r12*x353))+new_r20);
evalcond[1]=(((new_r22*x354))+new_r11);
evalcond[2]=((((-1.0)*x354*x355))+new_r21);
evalcond[3]=((((-1.0)*new_r22*x356))+new_r10);
evalcond[4]=((((-1.0)*(1.0)*new_r00))+(((-1.0)*x354)));
evalcond[5]=(x357+(((-1.0)*(1.0)*new_r01)));
evalcond[6]=(((new_r11*new_r22))+x354+(((-1.0)*new_r21*x355)));
evalcond[7]=(((new_r10*new_r22))+(((-1.0)*new_r20*x355))+x357);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x358=((1.0)*cj4);
IkReal x359=((((-1.0)*x358))+new_r22);
IkReal x360=((1.0)*new_r12);
IkReal x361=((1.0)*sj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=x359;
evalcond[2]=x359;
evalcond[3]=new_r02;
evalcond[4]=(sj4+new_r12);
evalcond[5]=((((-1.0)*x361))+(((-1.0)*x360)));
evalcond[6]=((((-1.0)*new_r10*x361))+((cj4*new_r20)));
evalcond[7]=((((-1.0)*new_r11*x361))+((cj4*new_r21)));
evalcond[8]=((-1.0)+(((-1.0)*sj4*x360))+((cj4*new_r22)));
evalcond[9]=((((-1.0)*new_r12*x358))+(((-1.0)*new_r22*x361)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(new_r00, new_r01);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x362=IKsin(j5);
IkReal x363=((1.0)*(IKcos(j5)));
IkReal x364=((-1.0)*x363);
IkReal x365=((1.0)*new_r11);
IkReal x366=((1.0)*new_r10);
evalcond[0]=(((new_r12*x362))+new_r21);
evalcond[1]=((((-1.0)*x362))+new_r00);
evalcond[2]=(x364+new_r01);
evalcond[3]=((((-1.0)*new_r12*x363))+new_r20);
evalcond[4]=(((new_r22*x362))+(((-1.0)*x365)));
evalcond[5]=((((-1.0)*new_r22*x363))+(((-1.0)*x366)));
evalcond[6]=((((-1.0)*new_r22*x365))+((new_r12*new_r21))+x362);
evalcond[7]=((((-1.0)*new_r22*x366))+((new_r12*new_r20))+x364);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x367=((1.0)*sj3);
IkReal x368=((((-1.0)*new_r02*x367))+((cj3*new_r12)));
IkReal x369=((-1.0)+((new_r12*sj3))+((cj3*new_r02)));
IkReal x370=(((new_r11*sj3))+((cj3*new_r01)));
IkReal x371=(((new_r10*sj3))+((cj3*new_r00)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=((((-1.0)*(1.0)*cj3))+new_r02);
evalcond[3]=((((-1.0)*x367))+new_r12);
evalcond[4]=x368;
evalcond[5]=x368;
evalcond[6]=x369;
evalcond[7]=x370;
evalcond[8]=x371;
evalcond[9]=x371;
evalcond[10]=x370;
evalcond[11]=x369;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*(((1.0)*new_r20)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((-1.0)*(((1.0)*new_r20))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(new_r21, ((-1.0)*(((1.0)*new_r20))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x372=IKcos(j5);
IkReal x373=IKsin(j5);
IkReal x374=((1.0)*x373);
IkReal x375=((-1.0)*x374);
IkReal x376=((1.0)*x372);
IkReal x377=((1.0)*new_r12);
evalcond[0]=(x372+new_r20);
evalcond[1]=(x375+new_r21);
evalcond[2]=(((new_r12*x372))+new_r01);
evalcond[3]=(((new_r12*x373))+new_r00);
evalcond[4]=((((-1.0)*new_r02*x376))+new_r11);
evalcond[5]=((((-1.0)*new_r02*x374))+new_r10);
evalcond[6]=((((-1.0)*new_r00*x377))+x375+((new_r02*new_r10)));
evalcond[7]=(((new_r02*new_r11))+(((-1.0)*new_r01*x377))+(((-1.0)*x376)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x378=((((-1.0)*(1.0)*new_r02*sj3))+((cj3*new_r12)));
IkReal x379=(cj3*new_r02);
IkReal x380=(new_r12*sj3);
IkReal x381=(cj3*new_r01);
IkReal x382=(new_r11*sj3);
IkReal x383=(cj3*new_r00);
IkReal x384=(new_r10*sj3);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=(cj3+new_r02);
evalcond[3]=(sj3+new_r12);
evalcond[4]=x378;
evalcond[5]=x378;
evalcond[6]=((1.0)+x380+x379);
evalcond[7]=(x381+x382);
evalcond[8]=(x384+x383);
evalcond[9]=((((-1.0)*x383))+(((-1.0)*x384)));
evalcond[10]=((((-1.0)*x382))+(((-1.0)*x381)));
evalcond[11]=((-1.0)+(((-1.0)*x379))+(((-1.0)*x380)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((-1.0)*(((1.0)*new_r21)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(((1.0)*new_r21))))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-1.0)*(((1.0)*new_r21))), new_r20);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x385=IKsin(j5);
IkReal x386=IKcos(j5);
IkReal x387=((1.0)*x386);
IkReal x388=((-1.0)*x387);
IkReal x389=((1.0)*x385);
IkReal x390=((1.0)*new_r02);
evalcond[0]=(x385+new_r21);
evalcond[1]=(x388+new_r20);
evalcond[2]=(((new_r02*x386))+new_r11);
evalcond[3]=(new_r10+((new_r02*x385)));
evalcond[4]=((((-1.0)*new_r12*x387))+new_r01);
evalcond[5]=((((-1.0)*new_r12*x389))+new_r00);
evalcond[6]=(((new_r00*new_r12))+(((-1.0)*new_r10*x390))+(((-1.0)*x389)));
evalcond[7]=(((new_r01*new_r12))+x388+(((-1.0)*new_r11*x390)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x391=((((-1.0)*(1.0)*new_r02*sj3))+((cj3*new_r12)));
IkReal x392=(((new_r12*sj3))+((cj3*new_r02)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=new_r20;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
evalcond[5]=new_r21;
evalcond[6]=x391;
evalcond[7]=x391;
evalcond[8]=x392;
evalcond[9]=x392;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x393=((1.0)*new_r01);
if( IKabs(((((-1.0)*(1.0)*new_r00*sj3))+(((-1.0)*cj3*x393)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj3*new_r00))+(((-1.0)*sj3*x393)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*(1.0)*new_r00*sj3))+(((-1.0)*cj3*x393))))+IKsqr((((cj3*new_r00))+(((-1.0)*sj3*x393))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*(1.0)*new_r00*sj3))+(((-1.0)*cj3*x393))), (((cj3*new_r00))+(((-1.0)*sj3*x393))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x394=IKsin(j5);
IkReal x395=(cj3*x394);
IkReal x396=IKcos(j5);
IkReal x397=((1.0)*x396);
IkReal x398=((-1.0)*x397);
IkReal x399=((1.0)*sj3);
IkReal x400=(((sj3*x394))+(((-1.0)*cj3*x397)));
evalcond[0]=(x394+((new_r11*sj3))+((cj3*new_r01)));
evalcond[1]=(x395+((sj3*x396))+new_r01);
evalcond[2]=(x398+((new_r10*sj3))+((cj3*new_r00)));
evalcond[3]=(((cj3*new_r10))+(((-1.0)*x394))+(((-1.0)*new_r00*x399)));
evalcond[4]=(((cj3*new_r11))+x398+(((-1.0)*new_r01*x399)));
evalcond[5]=(x400+new_r00);
evalcond[6]=(x400+new_r11);
evalcond[7]=((((-1.0)*x395))+new_r10+(((-1.0)*x396*x399)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x401=((((-1.0)*(1.0)*new_r02*sj3))+((cj3*new_r12)));
IkReal x402=(cj3*new_r02);
IkReal x403=(new_r12*sj3);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
evalcond[1]=((1.0)+new_r22);
evalcond[2]=new_r20;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
evalcond[5]=new_r21;
evalcond[6]=x401;
evalcond[7]=x401;
evalcond[8]=(x403+x402);
evalcond[9]=((((-1.0)*x403))+(((-1.0)*x402)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x404=((1.0)*new_r00);
if( IKabs(((((-1.0)*sj3*x404))+((cj3*new_r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj3*x404))+(((-1.0)*(1.0)*new_r01*sj3)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj3*x404))+((cj3*new_r01))))+IKsqr(((((-1.0)*cj3*x404))+(((-1.0)*(1.0)*new_r01*sj3))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*sj3*x404))+((cj3*new_r01))), ((((-1.0)*cj3*x404))+(((-1.0)*(1.0)*new_r01*sj3))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x405=IKcos(j5);
IkReal x406=IKsin(j5);
IkReal x407=((1.0)*x406);
IkReal x408=((-1.0)*x407);
IkReal x409=(cj3*x405);
IkReal x410=((1.0)*sj3);
IkReal x411=(((sj3*x405))+(((-1.0)*cj3*x407)));
evalcond[0]=(((new_r10*sj3))+((cj3*new_r00))+x405);
evalcond[1]=(((new_r11*sj3))+x408+((cj3*new_r01)));
evalcond[2]=(x409+new_r00+((sj3*x406)));
evalcond[3]=(((cj3*new_r10))+x408+(((-1.0)*new_r00*x410)));
evalcond[4]=(((cj3*new_r11))+(((-1.0)*new_r01*x410))+(((-1.0)*x405)));
evalcond[5]=(x411+new_r01);
evalcond[6]=(x411+new_r10);
evalcond[7]=((((-1.0)*x409))+(((-1.0)*x406*x410))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x412=((((-1.0)*(1.0)*cj4))+new_r22);
IkReal x413=((1.0)*sj4);
IkReal x414=(new_r02+(((-1.0)*x413)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=x412;
evalcond[2]=x412;
evalcond[3]=x414;
evalcond[4]=new_r12;
evalcond[5]=x414;
evalcond[6]=(((new_r00*sj4))+((cj4*new_r20)));
evalcond[7]=(((cj4*new_r21))+((new_r01*sj4)));
evalcond[8]=((-1.0)+((new_r02*sj4))+((cj4*new_r22)));
evalcond[9]=((((-1.0)*new_r22*x413))+((cj4*new_r02)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(new_r10, new_r11);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x415=IKcos(j5);
IkReal x416=IKsin(j5);
IkReal x417=((1.0)*x415);
IkReal x418=((-1.0)*x417);
IkReal x419=((1.0)*new_r02);
evalcond[0]=(((new_r02*x415))+new_r20);
evalcond[1]=((((-1.0)*x416))+new_r10);
evalcond[2]=(x418+new_r11);
evalcond[3]=(new_r01+((new_r22*x416)));
evalcond[4]=((((-1.0)*x416*x419))+new_r21);
evalcond[5]=((((-1.0)*new_r22*x417))+new_r00);
evalcond[6]=(x416+((new_r01*new_r22))+(((-1.0)*new_r21*x419)));
evalcond[7]=((((-1.0)*new_r20*x419))+x418+((new_r00*new_r22)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x420=((1.0)*cj4);
IkReal x421=((((-1.0)*x420))+new_r22);
IkReal x422=((1.0)*new_r02);
IkReal x423=((1.0)*sj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=x421;
evalcond[2]=x421;
evalcond[3]=(sj4+new_r02);
evalcond[4]=new_r12;
evalcond[5]=((((-1.0)*x422))+(((-1.0)*x423)));
evalcond[6]=((((-1.0)*new_r00*x423))+((cj4*new_r20)));
evalcond[7]=(((cj4*new_r21))+(((-1.0)*new_r01*x423)));
evalcond[8]=((-1.0)+(((-1.0)*sj4*x422))+((cj4*new_r22)));
evalcond[9]=((((-1.0)*new_r22*x423))+(((-1.0)*new_r02*x420)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x424 = IKatan2WithCheck(IkReal(((-1.0)*(((1.0)*new_r21)))),new_r20,IKFAST_ATAN2_MAGTHRESH);
if(!x424.valid){
continue;
}
CheckValue<IkReal> x425=IKPowWithIntegerCheck(IKsign(new_r02),-1);
if(!x425.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x424.value)+(((1.5707963267949)*(x425.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x426=IKsin(j5);
IkReal x427=((1.0)*(IKcos(j5)));
IkReal x428=((-1.0)*x427);
IkReal x429=((1.0)*new_r01);
IkReal x430=((1.0)*new_r00);
evalcond[0]=(((new_r02*x426))+new_r21);
evalcond[1]=((((-1.0)*new_r02*x427))+new_r20);
evalcond[2]=((((-1.0)*(1.0)*new_r10))+(((-1.0)*x426)));
evalcond[3]=(x428+(((-1.0)*(1.0)*new_r11)));
evalcond[4]=((((-1.0)*x429))+((new_r22*x426)));
evalcond[5]=((((-1.0)*new_r22*x427))+(((-1.0)*x430)));
evalcond[6]=(((new_r02*new_r21))+(((-1.0)*new_r22*x429))+x426);
evalcond[7]=(((new_r02*new_r20))+x428+(((-1.0)*new_r22*x430)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x432=IKPowWithIntegerCheck(sj4,-1);
if(!x432.valid){
continue;
}
IkReal x431=x432.value;
CheckValue<IkReal> x433=IKPowWithIntegerCheck(cj3,-1);
if(!x433.valid){
continue;
}
CheckValue<IkReal> x434=IKPowWithIntegerCheck(cj4,-1);
if(!x434.valid){
continue;
}
if( IKabs((x431*(x433.value)*(x434.value)*(((((-1.0)*(1.0)*new_r01*sj4))+((new_r20*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x431)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x431*(x433.value)*(x434.value)*(((((-1.0)*(1.0)*new_r01*sj4))+((new_r20*sj3))))))+IKsqr(((-1.0)*new_r20*x431))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((x431*(x433.value)*(x434.value)*(((((-1.0)*(1.0)*new_r01*sj4))+((new_r20*sj3))))), ((-1.0)*new_r20*x431));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[12];
IkReal x435=IKcos(j5);
IkReal x436=IKsin(j5);
IkReal x437=((1.0)*sj4);
IkReal x438=(cj3*new_r01);
IkReal x439=(new_r11*sj3);
IkReal x440=(cj4*x436);
IkReal x441=((1.0)*sj3);
IkReal x442=((1.0)*x436);
IkReal x443=((1.0)*x435);
IkReal x444=((-1.0)*x443);
IkReal x445=(cj3*new_r00);
IkReal x446=(new_r10*sj3);
IkReal x447=(cj3*x443);
evalcond[0]=(((sj4*x435))+new_r20);
evalcond[1]=(new_r21+(((-1.0)*x436*x437)));
evalcond[2]=(x440+x439+x438);
evalcond[3]=(((cj3*new_r10))+(((-1.0)*new_r00*x441))+(((-1.0)*x442)));
evalcond[4]=(((cj3*new_r11))+(((-1.0)*new_r01*x441))+x444);
evalcond[5]=(((cj3*x440))+((sj3*x435))+new_r01);
evalcond[6]=(x446+x445+(((-1.0)*cj4*x443)));
evalcond[7]=((((-1.0)*cj4*x447))+((sj3*x436))+new_r00);
evalcond[8]=((((-1.0)*x447))+((sj3*x440))+new_r11);
evalcond[9]=((((-1.0)*cj3*x442))+(((-1.0)*cj4*x435*x441))+new_r10);
evalcond[10]=(((cj4*x439))+x436+((cj4*x438))+(((-1.0)*new_r21*x437)));
evalcond[11]=(((cj4*x445))+x444+((cj4*x446))+(((-1.0)*new_r20*x437)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x450=IKPowWithIntegerCheck(sj4,-1);
if(!x450.valid){
continue;
}
IkReal x448=x450.value;
IkReal x449=((1.0)*new_r20);
CheckValue<IkReal> x451=IKPowWithIntegerCheck(sj3,-1);
if(!x451.valid){
continue;
}
if( IKabs((x448*(x451.value)*(((((-1.0)*cj3*cj4*x449))+(((-1.0)*(1.0)*new_r00*sj4)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*x448*x449)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x448*(x451.value)*(((((-1.0)*cj3*cj4*x449))+(((-1.0)*(1.0)*new_r00*sj4))))))+IKsqr(((-1.0)*x448*x449))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((x448*(x451.value)*(((((-1.0)*cj3*cj4*x449))+(((-1.0)*(1.0)*new_r00*sj4))))), ((-1.0)*x448*x449));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[12];
IkReal x452=IKcos(j5);
IkReal x453=IKsin(j5);
IkReal x454=((1.0)*sj4);
IkReal x455=(cj3*new_r01);
IkReal x456=(new_r11*sj3);
IkReal x457=(cj4*x453);
IkReal x458=((1.0)*sj3);
IkReal x459=((1.0)*x453);
IkReal x460=((1.0)*x452);
IkReal x461=((-1.0)*x460);
IkReal x462=(cj3*new_r00);
IkReal x463=(new_r10*sj3);
IkReal x464=(cj3*x460);
evalcond[0]=(((sj4*x452))+new_r20);
evalcond[1]=((((-1.0)*x453*x454))+new_r21);
evalcond[2]=(x455+x457+x456);
evalcond[3]=(((cj3*new_r10))+(((-1.0)*new_r00*x458))+(((-1.0)*x459)));
evalcond[4]=(((cj3*new_r11))+(((-1.0)*new_r01*x458))+x461);
evalcond[5]=(((cj3*x457))+((sj3*x452))+new_r01);
evalcond[6]=((((-1.0)*cj4*x460))+x462+x463);
evalcond[7]=(((sj3*x453))+(((-1.0)*cj4*x464))+new_r00);
evalcond[8]=(((sj3*x457))+new_r11+(((-1.0)*x464)));
evalcond[9]=(new_r10+(((-1.0)*cj4*x452*x458))+(((-1.0)*cj3*x459)));
evalcond[10]=(((cj4*x456))+((cj4*x455))+x453+(((-1.0)*new_r21*x454)));
evalcond[11]=(((cj4*x462))+((cj4*x463))+(((-1.0)*new_r20*x454))+x461);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x465=IKPowWithIntegerCheck(IKsign(sj4),-1);
if(!x465.valid){
continue;
}
CheckValue<IkReal> x466 = IKatan2WithCheck(IkReal(new_r21),((-1.0)*(((1.0)*new_r20))),IKFAST_ATAN2_MAGTHRESH);
if(!x466.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x465.value)))+(x466.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[12];
IkReal x467=IKcos(j5);
IkReal x468=IKsin(j5);
IkReal x469=((1.0)*sj4);
IkReal x470=(cj3*new_r01);
IkReal x471=(new_r11*sj3);
IkReal x472=(cj4*x468);
IkReal x473=((1.0)*sj3);
IkReal x474=((1.0)*x468);
IkReal x475=((1.0)*x467);
IkReal x476=((-1.0)*x475);
IkReal x477=(cj3*new_r00);
IkReal x478=(new_r10*sj3);
IkReal x479=(cj3*x475);
evalcond[0]=(((sj4*x467))+new_r20);
evalcond[1]=((((-1.0)*x468*x469))+new_r21);
evalcond[2]=(x470+x471+x472);
evalcond[3]=(((cj3*new_r10))+(((-1.0)*new_r00*x473))+(((-1.0)*x474)));
evalcond[4]=(((cj3*new_r11))+x476+(((-1.0)*new_r01*x473)));
evalcond[5]=(((sj3*x467))+((cj3*x472))+new_r01);
evalcond[6]=(x478+x477+(((-1.0)*cj4*x475)));
evalcond[7]=(((sj3*x468))+(((-1.0)*cj4*x479))+new_r00);
evalcond[8]=(((sj3*x472))+(((-1.0)*x479))+new_r11);
evalcond[9]=((((-1.0)*cj3*x474))+new_r10+(((-1.0)*cj4*x467*x473)));
evalcond[10]=(((cj4*x471))+((cj4*x470))+x468+(((-1.0)*new_r21*x469)));
evalcond[11]=(x476+(((-1.0)*new_r20*x469))+((cj4*x477))+((cj4*x478)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - abb_irb120 (1527a51807734650091a2b8d7c402ac7)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000048"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
